import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler

# Load the dataset
house_data = pd.read_csv('house_data.csv')

# Check for missing values
if house_data.isnull().sum().any():
    print("Warning: Missing values found in the dataset.")
    house_data.dropna(inplace=True)

# Scale the features using StandardScaler
scaler = StandardScaler()
house_data[['square_footage', 'num_bedrooms', 'num_bathrooms']] = scaler.fit_transform(house_data[['square_footage', 'num_bedrooms', 'num_bathrooms']])

# Split the data into training and testing sets
X = house_data[['square_footage', 'num_bedrooms', 'num_bathrooms']]
y = house_data['price']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train a linear regression model
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)

# Make predictions on the testing data
y_pred = lr_model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f'Mean Squared Error (MSE): {mse:.2f}')
print(f'R-squared Score: {r2:.2f}')

# Use the model for predictions
def predict_house_price(square_footage, num_bedrooms, num_bathrooms):
    new_data = pd.DataFrame({'square_footage': [square_footage], 'num_bedrooms': [num_bedrooms], 'num_bathrooms': [num_bathrooms]})
    new_data[['square_footage', 'num_bedrooms', 'num_bathrooms']] = scaler.transform(new_data[['square_footage', 'num_bedrooms', 'num_bathrooms']])
    predicted_price = lr_model.predict(new_data)[0]
    return predicted_price

# Example usage:
square_footage = 2500
num_bedrooms = 3
num_bathrooms = 2
predicted_price = predict_house_price(square_footage, num_bedrooms, num_bathrooms)
print(f'Predicted Price: ${predicted_price:.2f}')
